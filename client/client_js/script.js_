let canvas = document.getElementById("myCanvas");
let ctx = canvas.getContext("2d");

// bricks parms
let brickRowsNum = 4;
let brickColumnsNum = 5;
let brickWidth = 50;
let brickHeight = 10;
let brickPadding = 12;
let brickOffsetTop = 10;
let brickOffsetLeft = 90;

// paddle parms
let paddleHeight = 10;
let paddleWidth = 75;
let paddleX = (canvas.width - paddleWidth) / 2;

let rightPressed = false;
let leftPressed = false;

// ball parms
let ballRadius = 10;
let ballX = canvas.width / 2;
let ballY = canvas.height / 2;
let dx = 2;
let dy = -2;

function keyDownHandler(e) {
    if(e.key == "Right" || e.key == "ArrowRight") {
        rightPressed = true;
    }
    else if(e.key == "Left" || e.key == "ArrowLeft") {
        leftPressed = true;
    }
}

function keyUpHandler(e) {
    if(e.key == "Right" || e.key == "ArrowRight") {
        rightPressed = false;
    }
    else if(e.key == "Left" || e.key == "ArrowLeft") {
        leftPressed = false;
    }
}

let bricks = [];

function initBricks() {
    for(let i = 0; i < brickRowsNum; i++) {
        bricks[i] = [];
        for(let j = 0; j < brickColumnsNum; j++) {
            bricks[i][j] = { x: 0, y: 0, active: 1};
        }
    }
}

function drawBricks() {
    for(let i = 0; i < brickRowsNum; i++) {
        for(let j = 0; j < brickColumnsNum; j++) {
            if(bricks[i][j].active == 1) {
                let brickX = j * (brickWidth + brickPadding) + brickOffsetLeft;
                let brickY = i * (brickHeight + brickPadding) + brickOffsetTop;
                bricks[i][j].x = brickX;
                bricks[i][j].y = brickY;

                ctx.beginPath();
                ctx.rect(brickX, brickY, brickWidth, brickHeight);
                ctx.fillStyle = "blue";
                ctx.fill();
                ctx.closePath();
            }
        }
    }
}

function collisionDetection() {
    for(let i = 0; i < brickRowsNum; i++) {
        for(let j = 0; j < brickColumnsNum; j++) {
            brick = bricks[i][j];
            if(brick.active == 1) {
                if(ballX + ballRadius > brick.x && ballX + ballRadius < brick.x + brickWidth
                   && ballY + ballRadius > brick.y && ballY < brick.y + brickHeight) {
                    dy = -dy;
                    brick.active = 0
                }
            }
        }
    }
}

function drawPaddle() {
    ctx.beginPath();
    ctx.rect(paddleX, canvas.height - paddleHeight, paddleWidth, paddleHeight);
    ctx.fillStyle = "black";
    ctx.fill();
    ctx.closePath();
}

function drawBall() {
    ctx.beginPath();
    ctx.arc(ballX, ballY, ballRadius, 0, Math.PI * 2, false);
    ctx.fillStyle = "red";
    ctx.fill();
    ctx.closePath();
}

function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height); 

    // drawing paddle logic
    if(rightPressed) {
        if(paddleX + paddleWidth < canvas.width) {
            paddleX += 4;
        }
    }

    if(leftPressed) {
        if(paddleX > 0) {
            paddleX -= 4;
        }
    }

    // drawing ball logic
    if(ballY + dy < ballRadius) {
        dy = -dy;
    } else if(ballY + dy + ballRadius > canvas.height - paddleHeight && (ballX > paddleX && ballX < paddleX + paddleWidth)) {
        dy = -dy;
    } else if(ballY + dy + ballRadius > canvas.height) {
        alert("Game over!");
        document.location.reload();
        clearInterval(interval);
    }

    if(ballX + dx - ballRadius < 0 || ballX + dx + ballRadius > canvas.width) {
        dx = -dx;
    }

    ballX += dx;
    ballY += dy;

    collisionDetection();
    drawBall();
    drawPaddle();
    drawBricks();
}

function init() {
    initBricks();

    document.addEventListener("keydown", keyDownHandler, false);
    document.addEventListener("keyup", keyUpHandler, false);
}

let interval = setInterval(draw, 20);
init();
